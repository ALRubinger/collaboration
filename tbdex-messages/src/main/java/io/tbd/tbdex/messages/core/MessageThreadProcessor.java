package io.tbd.tbdex.messages.core;

import io.tbd.tbdex.messages.processors.MessageProcessor;

import java.util.HashMap;
import java.util.Map;

public class MessageThreadProcessor {
    MessageThread messageThread;
    Map<MessageType, MessageProcessor> messageProcessors = new HashMap<>();

    private MessageThreadProcessor() {
        this.messageThread = new MessageThread();
    }

    private void addProcessor(MessageType type, MessageProcessor processor) {
        this.messageProcessors.put(type, processor);
    }

    /**
     * Adds a message to the message thread.
     * @param message - the message being added
     * @return A resulting message generated by processing the message being added
     * @throws RuntimeException - if the message being added is invalid
     */
    public Message addMessage(Message message) {
        if (message == null) {
            return null;
        }

        MessageType messageType = message.type();

        if (this.messageThread.isEmpty()) {
            // an Ask should always be the first message
            if (messageType != MessageType.Ask) {
                throw new RuntimeException("The first message in a thread can only be an Ask");
            }
        } else {
            if (messageType == MessageType.Ask) {
                throw new RuntimeException("an Ask can only be the first message in a thread");
            }

            Message lastMessage = this.messageThread.getLastMessage();

            if (lastMessage.type() == MessageType.Close) {
                throw new RuntimeException("Message Thread has already been closed");
            }
        }

        this.messageThread.addMessage(message);
        MessageProcessor processor = messageProcessors.get(message.type());

        if (processor == null) {
            return null;
        }

        Message resultingMessage = processor.process(message);
        this.addMessage(resultingMessage);

        return resultingMessage;
    }

    public static class Builder {
        private final MessageThreadProcessor instance;

        public Builder() {
            this.instance = new MessageThreadProcessor();
        }

        public Builder setMessageThread(MessageThread messageThread) {
            this.instance.messageThread = messageThread;

            return this;
        }

        public Builder setProcessor(MessageType type, MessageProcessor processor) {
            this.instance.addProcessor(type, processor);

            return this;
        }

        public MessageThreadProcessor build() {
            /* TODO: Decide if we want to keep this
             if (this.instance.messageProcessors.isEmpty()) {
                throw new RuntimeException("please provide at least 1 processor");
             }
            */

            return instance;
        }
    }
}
